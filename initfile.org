#+STARTUP: overview
#+TITLE: EMACS initialization file
#+AUTHOR: Skye S Harith
#+EMAIL: kaushik.harith@gmail.com
#+OPTIONS: toc:nil todo:nil

* Id commands
  #+begin_src emacs-lisp
    (setq user-full-name "Skye Srinivasan Harith")

    (setq user-mail-address "kaushik.harith@gmail.com")
  #+end_src
* Tweaks to emacs' appearance
** Theme
   #+begin_src emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
     (load-theme 'trans-side-testing t)
   #+end_src

** Tool and menu bars, startup message, line mode, fringe mode
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (set-scroll-bar-mode nil)
     (global-visual-line-mode t)
     (set-fringe-mode 0)
   #+end_src
** Display modeline time because I need that.
   #+begin_src emacs-lisp
     (display-time-mode 1)
   #+end_src
** Frame transparency, fullscreen
   #+begin_src emacs-lisp
     (add-to-list 'default-frame-alist '(fullscreen . maximized))
     (set-frame-parameter (selected-frame) 'alpha '(100 . 50))
     (add-to-list 'default-frame-alist '(alpha . (100 . 50)))
   #+end_src
** Pretty-fy symbols
   #+begin_src emacs-lisp
     (use-package pretty-symbols
       :ensure t
       :config
       (global-pretty-mode t)
       (add-hook 'emacs-lisp-mode-hook 'pretty-symbols-mode)
       (add-hook 'org-mode-hook 'pretty-symbols-mode))
   #+end_src 
* Packages
** Powerline
   This is a modeline replacement.
   #+begin_src emacs-lisp
     (use-package powerline
       :ensure t
       :config (progn
		 (setq powerline-default-separator 'contour)
		 (powerline-center-theme))
       )
   #+end_src
** Linum
   line number modes
   #+begin_src emacs-lisp
     (use-package linum-relative
       :ensure t
       :init (global-linum-mode t)
       :config (linum-relative-mode))
   #+end_src
** Try
   lets you try packages temporarily
   #+begin_src emacs-lisp
     (use-package try
       :ensure t)
   #+end_src
** Which-Key
   #+begin_src emacs-lisp
     (use-package which-key
       :diminish ""
       :ensure t
       :config (which-key-mode))
   #+end_src
** Diminish
   #+begin_src emacs-lisp
     (use-package diminish
       :ensure t)
   #+end_src
** Ace-Window
   changes behaviour of (other-window), same keybind ctrl-o
   #+begin_src emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (global-set-key [remap other-window] 'ace-window)
       )
   #+end_src
** Counsel and Swiper (IVY)
   better search and completion in minibuffer (TO BE REDONE)
   #+begin_src emacs-lisp
     (use-package counsel
       :ensure t
       )

     (use-package swiper
       :ensure try
       :config
       (progn (ivy-mode 1)
	 (setq ivy-use-virtual-buffers t)
	 (global-set-key "\C-s" 'swiper)
	 (global-set-key (kbd "C-c C-r") 'ivy-resume)
	 (global-set-key (kbd "<f6>") 'ivy-resume)
	 (global-set-key (kbd "M-x") 'counsel-M-x)
	 (global-set-key (kbd "C-x C-f") 'counsel-find-file)
	 (global-set-key (kbd "<f1> f") 'counsel-describe-function)
	 (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	 (global-set-key (kbd "<f1> l") 'counsel-load-library)
	 (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
	 (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
	 (global-set-key (kbd "C-c g") 'counsel-git)
	 (global-set-key (kbd "C-c j") 'counsel-git-grep)
	 (global-set-key (kbd "C-c k") 'counsel-ag)
	 (global-set-key (kbd "C-x l") 'counsel-locate)
	 (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
	 (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	 (setq swiper-use-visual-line nil)
	 (setq swiper-use-visual-line-p (lambda (a) nil))
	 ))
   #+end_src
** Ivy rich
   #+begin_src emacs-lisp
     (ivy-rich-mode 1)
     (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
   #+end_src
** Rainbow-Delimiters
   changes the colors of nested parens, brackets etc.
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config
       (progn
	 (rainbow-delimiters-mode 1)
	 (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
	 (add-hook 'Latex-mode-hook #'rainbow-delimiters-mode)))
   #+end_src
** Expand-region
   this changes the default mark position behaviour. Now, pressing ctrl-= after setting a mark will intelligently expand the highlighted region.
   #+begin_src emacs-lisp
     (use-package expand-region
     :ensure t
     :config
     (global-set-key (kbd "C-=") 'er/expand-region))
   #+end_src
** Outline, outline magic stuff. 
   #+begin_src emacs-lisp
     (eval-after-load 'outline
       '(progn
	 (require 'outline-magic)
	 (define-key outline-minor-mode-map (kbd "<C-tab>") 'outline-cycle)))

     (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
   #+end_src
** Auto-Complete
   auto-completion is currently provided by company mode. Still deciding on if its right to use.
   #+begin_src emacs-lisp
     (use-package company
       :diminish ""
       :ensure t
       :config
       (setq company-idle-delay 0)
       (setq company-minimum-prefix-length 4)
       (global-company-mode t))
   #+end_src
** Magit
   git integration
   #+begin_src emacs-lisp
     (use-package magit
       :ensure t)
   #+end_src
** Flycheck
   checks syntax on the fly. currently only enabled for python and elisp.
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :config
       (add-hook 'python-mode-hook 'flycheck-mode))
   #+end_src
** Undo Tree
   changes emacs' undo-redo behaviour. Standard ctrl-/ and ctrl-shift-/ with a tree given by ctrl-x u. q to quit and choose.
   #+begin_src emacs-lisp
     (use-package undo-tree
       :ensure t
       :diminish ""
       :init
       (global-undo-tree-mode))
   #+end_src
** Org Mode Stuff
*** Org 
    #+begin_src emacs-lisp
      (use-package org
	:ensure org-bullets
	:init
	(add-hook 'org-mode-hook 'org-cdlatex-mode)
	(setq org-highlight-latex-and-related '(native latex script))
	:config
	(setq org-agenda-files '("~/Documents/life/README.org")))
    #+end_src
*** Org-Bullets
    makes org mode pretty
    #+begin_src emacs-lisp
      (use-package org-bullets
	:ensure t
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+end_src
*** Org-ref
    #+begin_src emacs-lisp
      ;; (use-package org-ref
      ;;   :ensure t
      ;;   :config (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")))
    #+end_src
** Dashboard mode
   # dashboard mode
   # #+begin_src emacs-lisp
   #   (use-package dashboard
   #     :ensure t
   #     :config (progn
   # 		 (dashboard-setup-startup-hook)
   # 		 (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
   # 		 (setq dashboard-center-content t)
   # 		 (setq dashboard-items '((recents  . 5)
   # 					 (bookmarks . 5)
   # 					 (agenda . 5)
   # 					 (projects . 5)))
   # 		 (setq show-week-agenda-p t)
   # 		 (setq dashboard-set-heading-icons t)
   # 		 (setq dashboard-set-file-icons t)
   # 		 (setq dashboard-banner-logo-title "Welcome, Kaushik Skye Harith")
   # 		 (setq dashboard-startup-banner 'logo)
   # 		 (setq dashboard-set-navigator t)))

   #   (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
   # #+end_src
** All the icons
*** all the icons
    #+begin_src emacs-lisp
      (use-package all-the-icons)
      (use-package all-the-icons-dired)
      (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
    #+end_src
*** all the icons ivy
    #+begin_src emacs-lisp
      (all-the-icons-ivy-setup)
      (all-the-icons-ivy-rich-mode 1)
    #+end_src
*** all the icons ibuffer
    #+begin_src emacs-lisp
      (use-package all-the-icons-ibuffer
	:ensure t
	:init (all-the-icons-ibuffer-mode 1))
    #+end_src
** Restart emacs from within emacs
   #+begin_src emacs-lisp
     (use-package restart-emacs
       :ensure t
       :config (progn (setq restart-emacs-restore-frames t)))
   #+end_src
** Kurecolor
   #+begin_src emacs-lisp
     (use-package kurecolor
       :ensure t
       :bind
       (("M-S-<up>" . kurecolor-increase-hue-by-step)
       ("M-S-<down>" . kurecolor-decrease-hue-by-step)
       ("C-M-<up>" . kurecolor-increase-brightness-by-step)
       ("C-M-<down>" . kurecolor-decrease-brightness-by-step))
       )
   #+end_src
** Latex Mode
   #+begin_src emacs-lisp
     (use-package latex
       :defer t
       :ensure auctex
       :mode ("//.tex//" . latex-mode)
       :config
       (progn
	 (setq TeX-fold-mode t)
	 (setq TeX-parse-self t)
	 (setq TeX-save-query nil)
	 (setq TeX-PDF-mode t)
	 (add-hook 'LaTeX-mode-hook 'cdlatex-mode)
	 ))
   #+end_src
* Miscellaneous tweaks to emacs' default functioning
** y, n and revert buffer
   This includes changes yes or no questions to y or n questions, a keybind for a revert buffer, and a change to the default ibuffer functioning.
   #+begin_src emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+end_src
** revert buffer
   #+begin_src emacs-lisp
     (global-set-key (kbd "<f5>") 'revert-buffer)
   #+end_src
** alias ibuffer to list-buffers
   #+begin_src emacs-lisp
     (defalias 'list-buffers 'ibuffer)
   #+end_src
** Custom keybinds
   Use "C-z" for all my custom keybinds
*** autotheme-generate-face
    #+begin_src emacs-lisp
      (add-hook 'emacs-lisp-mode-hook
	    (lambda ()
	      (bind-key "C-z g" 'autothemer-generate-templates)))
    #+end_src
*** Fixup Whitespace, and eval top level function.
    #+begin_src emacs-lisp
      (bind-keys :map global-map
		 :prefix-map my-ctrl-z-prefix-map
		 :prefix "C-z"
		 ("<SPC>" . fixup-whitespace)
		 ("C-e" . eval-defun))
    #+end_src
** Custom Functions
   #+begin_src emacs-lisp
     (defun my/reload-init()
       "Clear customizations then reload the emacs initalisation"
       (interactive)
       (load "~/.emacs.d/init.el"))
   #+end_src
** Better autosaving
   #+begin_src emacs-lisp
     (setq backup-by-copying t      ; don't clobber symlinks
	   backup-directory-alist '(("." . "~/.emacs.d/saves/"))    ; don't litter my fs tree
	   delete-old-versions t
	   kept-new-versions 6
	   kept-old-versions 2
	   version-control t)       ; use versioned backups
     (setq auto-save-file-name-transforms
	   `((".*" "~/.emacs.d/saves/" t)))
   #+end_src
** Quitting the minibuffer better
   #+BEGIN_SRC emacs-lisp
     (defun my/keyboard-quit-context+ ()
       "Quit current context.

     This function is a combination of `keyboard-quit' and
     `keyboard-escape-quit' with some parts omitted and some custom
     behavior added."
       (interactive)
       (cond ((region-active-p)
	      ;; Avoid adding the region to the window selection.
	      (setq saved-region-selection nil)
	      (let (select-active-regions)
		(deactivate-mark)))
	     ((eq last-command 'mode-exited) nil)
	     (current-prefix-arg
	      nil)
	     (defining-kbd-macro
	       (message
		(substitute-command-keys
		 "Quit is ignored during macro defintion, use \\[kmacro-end-macro] if you want to stop macro definition"))
	       (cancel-kbd-macro-events))
	     ((active-minibuffer-window)
	      (when (get-buffer-window "*Completions*")
		;; hide completions first so point stays in active window when
		;; outside the minibuffer
		(minibuffer-hide-completions))
	      (abort-recursive-edit))
	     (t
	      (when completion-in-region-mode
		(completion-in-region-mode -1))
	      (let ((debug-on-quit nil))
		(signal 'quit nil)))))

     (global-set-key [remap keyboard-quit] #'my/keyboard-quit-context+)
   #+END_SRC
** Auctex things
   #+begin_src emacs-lisp
     (setenv "PATH" (concat "/opt/texlive/2020/bin/x86_64-linux:"
			      (getenv "PATH")))
     (add-to-list 'exec-path "/opt/texlive/2020/bin/x86_64-linux")
   #+end_src
** Custom window split toggle
   #+begin_src emacs-lisp
     (defun my/toggle-window-split ()
       (interactive)
       (if (= (count-windows) 2)
	   (let* ((this-win-buffer (window-buffer))
	      (next-win-buffer (window-buffer (next-window)))
	      (this-win-edges (window-edges (selected-window)))
	      (next-win-edges (window-edges (next-window)))
	      (this-win-2nd (not (and (<= (car this-win-edges)
			  (car next-win-edges))
			  (<= (cadr this-win-edges)
			  (cadr next-win-edges)))))
	      (splitter
	       (if (= (car this-win-edges)
		  (car (window-edges (next-window))))
	       'split-window-horizontally
	     'split-window-vertically)))
	 (delete-other-windows)
	 (let ((first-win (selected-window)))
	   (funcall splitter)
	   (if this-win-2nd (other-window 1))
	   (set-window-buffer (selected-window) this-win-buffer)
	   (set-window-buffer (next-window) next-win-buffer)
	   (select-window first-win)
	   (if this-win-2nd (other-window 1))))))

     (global-set-key (kbd "C-x |") 'my/toggle-window-split)
   #+end_src
** Smooth scrolling
   #+begin_src emacs-lisp
     (setq redisplay-dont-pause t
       scroll-margin 1
       scroll-step 1
       scroll-conservatively 10000
       scroll-preserve-screen-position 1)

     (setq auto-window-vscroll nil)
   #+end_src
* Lastly, load my life.org file. 
  This should only load if everything else doesn't fail.
  #+begin_src emacs-lisp
    (require 'org-tempo)
    (put 'scroll-left 'disabled nil)
    (put 'dired-find-alternate-file 'disabled nil)
    (put 'narrow-to-region 'disabled nil)
  #+end_src
