#+STARTUP: overview
#+TITLE: EMACS initialization file
#+AUTHOR: Skye S Harith
#+EMAIL: kaushik.harith@gmail.com
#+OPTIONS: toc:nil todo:nil

* Id commands
  #+begin_src emacs-lisp
    (setq user-full-name "Skye Srinivasan Harith")

    (setq user-mail-address "kaushik.harith@gmail.com")
  #+end_src
* Tweaks to emacs' appearance
** Theme
   #+begin_src emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
     (load-theme 'trans-side t)
   #+end_src

** Tool and menu bars, startup message, line mode, fringe mode
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (set-scroll-bar-mode nil)
     (global-visual-line-mode t)
     (set-fringe-mode 0)
   #+end_src
** Display modeline time because I need that.
   #+begin_src emacs-lisp
     (display-time-mode 1)
   #+end_src
** Frame transparency, fullscreen
   #+begin_src emacs-lisp
     (add-to-list 'default-frame-alist '(fullscreen . maximized))
     (set-frame-parameter (selected-frame) 'alpha '(100 . 50))
     (add-to-list 'default-frame-alist '(alpha . (100 . 50)))
   #+end_src
** Pretty-fy symbols
   #+begin_src emacs-lisp
     (use-package pretty-symbols
       :ensure t
       :config
       (global-pretty-mode t)
       (add-hook 'emacs-lisp-mode-hook 'pretty-symbols-mode)
       (add-hook 'org-mode-hook 'pretty-symbols-mode))
   #+end_src 

* Miscellaneous tweaks to emacs' default functioning
** Custom Load path for other things
   #+begin_src emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/stuff/")
   #+end_src
** Set a file for custom-set variables
   #+begin_src emacs-lisp
     (setq custom-file (concat user-emacs-directory "custom.el"))

     (load-file custom-file)
   #+end_src
** y, n instead of yes, no.
   Who on earth would want to type out a three or two letter word??
   #+begin_src emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+end_src
** Custom Functions
*** Window Split
    This is a function to toggle how the window is split
   #+begin_src emacs-lisp
     (defun my/toggle-window-split ()
       (interactive)
       (if (= (count-windows) 2)
	   (let* ((this-win-buffer (window-buffer))
	      (next-win-buffer (window-buffer (next-window)))
	      (this-win-edges (window-edges (selected-window)))
	      (next-win-edges (window-edges (next-window)))
	      (this-win-2nd (not (and (<= (car this-win-edges)
			  (car next-win-edges))
			  (<= (cadr this-win-edges)
			  (cadr next-win-edges)))))
	      (splitter
	       (if (= (car this-win-edges)
		  (car (window-edges (next-window))))
	       'split-window-horizontally
	     'split-window-vertically)))
	 (delete-other-windows)
	 (let ((first-win (selected-window)))
	   (funcall splitter)
	   (if this-win-2nd (other-window 1))
	   (set-window-buffer (selected-window) this-win-buffer)
	   (set-window-buffer (next-window) next-win-buffer)
	   (select-window first-win)
	   (if this-win-2nd (other-window 1))))))
   #+end_src

*** Quitting the minibuffer better
    #+BEGIN_SRC emacs-lisp
      (defun my/keyboard-quit-context+ ()
	"Quit current context.

      This function is a combination of `keyboard-quit' and
      `keyboard-escape-quit' with some parts omitted and some custom
      behavior added."
	(interactive)
	(cond ((region-active-p)
	       ;; Avoid adding the region to the window selection.
	       (setq saved-region-selection nil)
	       (let (select-active-regions)
		 (deactivate-mark)))
	      ((eq last-command 'mode-exited) nil)
	      (current-prefix-arg
	       nil)
	      (defining-kbd-macro
		(message
		 (substitute-command-keys
		  "Quit is ignored during macro defintion, use \\[kmacro-end-macro] if you want to stop macro definition"))
		(cancel-kbd-macro-events))
	      ((active-minibuffer-window)
	       (when (get-buffer-window "*Completions*")
		 ;; hide completions first so point stays in active window when
		 ;; outside the minibuffer
		 (minibuffer-hide-completions))
	       (abort-recursive-edit))
	      (t
	       (when completion-in-region-mode
		 (completion-in-region-mode -1))
	       (let ((debug-on-quit nil))
		 (signal 'quit nil)))))

      (global-set-key [remap keyboard-quit] #'my/keyboard-quit-context+)
    #+END_SRC

*** Inhibit linum mode
    #+begin_src emacs-lisp
      (defun my/inhibit-global-linum-mode ()
	"Counter-act `global-linum-mode'."
	(add-hook 'after-change-major-mode-hook
		  (lambda () (linum-mode 0))
		  :append :local))
    #+end_src

    #+RESULTS:
    : my/inhibit-global-linum-mode

** Custom keybinds
   Use "C-z" for all my custom keybinds and use "M-z" for functions that are related but broader/inverse in scope.
*** elisp mode specific binds
    The following functions are bound
    - Autothemer.el generate unspecified faces.
    #+begin_src emacs-lisp
      (bind-key "C-z g" 'autothemer-generate-templates emacs-lisp-mode-map)
    #+end_src

    #+RESULTS:
    : autothemer-generate-templates
    
*** Global-Map binds 
    The following functions are bound
    - remove redundant white space between text
    - evalueate top-level function instead of function at point (elisp/global)
    - a custom function to toggle window split from horizontal to vertical.
    #+begin_src emacs-lisp
      (bind-keys :map global-map
		 :prefix-map my-ctrl-z-prefix-map
		 :prefix "C-z"
		 ("C-<SPC>" . fixup-whitespace)
		 ("C-e" . eval-defun)
		 ("|" . my/toggle-window-split)
		 (":" . uncomment-region))

      (bind-keys :map global-map
		 :prefix-map my-meta-z-prefix-ma
		 :prefix "M-z"
		 (":" . comment-region))
    #+end_src

*** Revert buffer
    #+begin_src emacs-lisp
      (bind-key "<f5>" 'revert-buffer global-map)
    #+end_src
** Better autosaving
   #+begin_src emacs-lisp
     (setq backup-by-copying t      ; don't clobber symlinks
	   backup-directory-alist '(("." . "~/.emacs.d/saves/"))    ; don't litter my fs tree
	   delete-old-versions t
	   kept-new-versions 6
	   kept-old-versions 2
	   version-control t)       ; use versioned backups
     (setq auto-save-file-name-transforms
	   `((".*" "~/.emacs.d/saves/" t)))
   #+end_src

** Smooth scrolling
   Most of this didn't work. Auto-window-vscroll did for some reason.
   #+begin_src emacs-lisp
     (setq redisplay-dont-pause t
       scroll-margin 1
       scroll-step 1
       scroll-conservatively 10000
       scroll-preserve-screen-position 1)

     (setq auto-window-vscroll nil)
   #+end_src
** Vertical instead of horizontal split
   #+begin_src emacs-lisp
     (setq split-height-threshold nil)
     (setq split-width-threshold 0)
   #+end_src
* Packages
** Powerline
   This is a modeline replacement.
   #+begin_src emacs-lisp
     (use-package powerline
       :ensure t
       :config (progn
		 (setq powerline-default-separator 'contour)
		 (powerline-center-theme))
       )
   #+end_src
** Linum
   line number modes
   #+begin_src emacs-lisp
     (use-package linum-relative
       :ensure t
       :after (recentf)
       :init (global-linum-mode t)
       :config
       (linum-relative-mode)
       (add-hook 'doc-view-mode-hook 'my/inhibit-global-linum-mode)
       (add-hook 'pdf-view-mode-hook 'my/inhibit-global-linum-mode))
   #+end_src

** Try
   lets you try packages temporarily
   #+begin_src emacs-lisp
     (use-package try
       :ensure t)
   #+end_src
** Which-Key
   #+begin_src emacs-lisp
     (use-package which-key
       :diminish ""
       :ensure t
       :config (which-key-mode))
   #+end_src
** Diminish
   #+begin_src emacs-lisp
     (use-package diminish
       :ensure t)
   #+end_src
** Ace-Window
   changes behaviour of (other-window), same keybind ctrl-o
   #+begin_src emacs-lisp
     (use-package ace-window
       :ensure t
       :bind ([remap other-window] . ace-window)
       :config
       (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
       )
   #+end_src
** Counsel and Swiper (IVY)
   Better search and completion in minibuffer.
   #+begin_src emacs-lisp
     (use-package ivy
       :demand
       :diminish ""
       :ensure t
       :bind
       (("C-s" . swiper)
	("C-c C-r" . ivy-resume)
	("<f6>" . ivy-resume)
	("M-x" . counsel-M-x)
	("C-x C-f" . counsel-find-file)
	("<f1> f" . counsel-describe-function)
	("<f1> v" . counsel-describe-variable)
	("<f1> l" . counsel-load-library)
	("<f2> i" . counsel-info-lookup-symbol)
	("<f2> u" . counsel-unicode-char)
	("C-c g" . counsel-git)
	("C-c j" . counsel-git-grep)
	("C-c k" . counsel-ag)
	("C-x l" . counsel-locate)
	("M-y" . counsel-yank-pop))
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq swiper-use-visual-line nil)
       (setq swiper-use-visual-line-p (lambda (a) nil)))
   #+end_src
** Ivy rich
   #+begin_src emacs-lisp
     (ivy-rich-mode 1)
     (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
   #+end_src
** Rainbow-Delimiters
   changes the colors of nested parens, brackets etc.
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config
       (rainbow-delimiters-mode 1)
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
       (add-hook 'Latex-mode-hook #'rainbow-delimiters-mode))
   #+end_src
** Expand-region
   this changes the default mark position behaviour. Now, pressing ctrl-= after setting a mark will intelligently expand the highlighted region.
   #+begin_src emacs-lisp
     (use-package expand-region
       :ensure t
       :after (org)
       :bind
       (:map global-map
	     ("C-=" . er/expand-region)))
   #+end_src

   #+RESULTS:
   : er/expand-region

** Outline, outline magic stuff. 
   #+begin_src emacs-lisp
     (eval-after-load 'outline
       '(progn
	 (require 'outline-magic)
	 (define-key outline-minor-mode-map (kbd "<C-tab>") 'outline-cycle)))
   #+end_src
** Company (Auto-completion)
*** Company
    auto-completion is currently provided by company mode. Still deciding on if its right to use.
    #+begin_src emacs-lisp
      (use-package company
	:diminish ""
	:ensure t
	:init
	(setq company-require-match nil) ; Don't require match, so you can still move your cursor as expected.
	(setq company-tooltip-align-annotations t) ; Align annotation to the right side.
	(setq company-eclim-auto-save nil) ; Stop eclim auto save.
	(setq company-dabbrev-downcase nil) ; No downcase when completion.

	:config
	(setq company-idle-delay 0)
	(setq company-minimum-prefix-length 4)
	(global-company-mode t)

	(defun jcs--company-complete-selection--advice-around (fn)
	  "Advice execute around `company-complete-selection' command."
	  (let ((company-dabbrev-downcase t))
	    (call-interactively fn)))
	(advice-add 'company-complete-selection :around #'jcs--company-complete-selection--advice-around))
    #+end_src

    #+RESULTS:
    : t

*** Company fuzzy
    #+begin_src emacs-lisp
      (use-package company-fuzzy
	:ensure t
	:after (company)
	:diminish ""
	:config
	(global-company-fuzzy-mode 1)
	(setq company-fuzzy-prefix-ontop t)
	(setq company-fuzzy-sorting-backend 'alphabetic)
	(setq company-fuzzy-show-annotation t))
    #+end_src
** Magit
   git integration
   #+begin_src emacs-lisp
     (use-package magit
       :ensure t)
   #+end_src
** Flycheck
   checks syntax on the fly. currently only enabled for python and elisp.
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :config
       (add-hook 'python-mode-hook 'flycheck-mode))
   #+end_src
** Undo Tree
   changes emacs' undo-redo behaviour. Standard ctrl-/ and ctrl-shift-/ with a tree given by ctrl-x u. q to quit and choose.
   #+begin_src emacs-lisp
     (use-package undo-tree
       :ensure t
       :diminish ""
       :init
       (global-undo-tree-mode))
   #+end_src
** Org Mode Stuff
*** Org 
    #+begin_src emacs-lisp
      (use-package org
	:ensure org-bullets
	:init
	(add-hook 'org-mode-hook 'org-cdlatex-mode)
	(setq org-highlight-latex-and-related '(native latex script))
	:config
	(setq org-agenda-files '("~/Documents/life/README.org")))
    #+end_src
*** Org-Bullets
    makes org mode pretty
    #+begin_src emacs-lisp
      (use-package org-bullets
	:ensure t
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+end_src
*** Org-ref
    #+begin_src emacs-lisp
      ;; (use-package org-ref
      ;;   :ensure t
      ;;   :config (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")))
    #+end_src
** Dashboard mode
   # dashboard mode
   # #+begin_src emacs-lisp
   #   (use-package dashboard
   #     :ensure t
   #     :config (progn
   # 		 (dashboard-setup-startup-hook)
   # 		 (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
   # 		 (setq dashboard-center-content t)
   # 		 (setq dashboard-items '((recents  . 5)
   # 					 (bookmarks . 5)
   # 					 (agenda . 5)
   # 					 (projects . 5)))
   # 		 (setq show-week-agenda-p t)
   # 		 (setq dashboard-set-heading-icons t)
   # 		 (setq dashboard-set-file-icons t)
   # 		 (setq dashboard-banner-logo-title "Welcome, Kaushik Skye Harith")
   # 		 (setq dashboard-startup-banner 'logo)
   # 		 (setq dashboard-set-navigator t)))

   #   (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
   # #+end_src
** PDF-tools
   #+begin_src emacs-lisp
     (use-package pdf-tools
       :ensure t
       :config
       (pdf-tools-install)
       (setq-default pdf-view-display-size 'fit-width)
       (setq pdf-annot-activate-created-annotations t)
     )
   #+end_src
** All the icons
*** all the icons
    #+begin_src emacs-lisp
      (use-package all-the-icons)
      (use-package all-the-icons-dired)
    #+end_src
*** all the icons ivy
    #+begin_src emacs-lisp
      (all-the-icons-ivy-setup)
      (all-the-icons-ivy-rich-mode 1)
    #+end_src
*** all the icons ibuffer
    #+begin_src emacs-lisp
      (use-package all-the-icons-ibuffer
	:ensure t
	:after (ibuffer ibuffer-projectile))
    #+end_src

** Restart emacs from within emacs
   #+begin_src emacs-lisp
     (use-package restart-emacs
       :ensure t
       :config (progn (setq restart-emacs-restore-frames t)))
   #+end_src
** Kurecolor
   #+begin_src emacs-lisp
     (use-package kurecolor
       :ensure t
       :bind
       (:map global-map
	     :prefix-map my-ctrl-z-map
	     :prefix "C-z"
	     ("M-<up>" . kurecolor-increase-hue-by-step)
	     ("M-<down>" . kurecolor-decrease-hue-by-step)
	     ("C-<up>" . kurecolor-increase-brightness-by-step)
	     ("C-<down>" . kurecolor-decrease-brightness-by-step)
	     ("S-<up>" . kurecolor-increase-saturation-by-step)
	     ("S-<down>" . kurecolor-decrease-saturation-by-step))
       )
   #+end_src
** Ibuffer
*** Ibuffer itself
    #+begin_src emacs-lisp
      (use-package ibuffer
	:bind (("C-x C-b" . ibuffer))
	:config
	(setq ibuffer-expert t)
	(setq ibuffer-saved-filter-groups nil)

	(add-hook 'ibuffer-mode-hook '(lambda ()
					(ibuffer-auto-mode 1)
					(all-the-icons-ibuffer-mode 1)
					(ibuffer-switch-to-saved-filter-groups "home")
					(ibuffer-projectile-set-filter-groups)
					(unless (eq ibuffer-sorting-mode 'alphabetic)
					  (ibuffer-do-sort-by-alphabetic))))

	)
    #+end_src
*** Ibuffer-projectile
    #+begin_src emacs-lisp
      (use-package ibuffer-projectile
	:ensure t
	)
    #+end_src
** Dired stuff
*** dired
    #+begin_src emacs-lisp
      (use-package dired
	:config
	(setq dired-recursive-copies 'always)
	(setq dired-recursive-deletes 'always)
	(setq delete-by-moving-to-trash t)
	(setq dired-listing-switches "-ahl --group-directories-first --time-style=long-iso")
	(setq dired-dwim-target t)
	:hook
	((dired-mode . dired-hide-details-mode)
	 (dired-mode . all-the-icons-dired-mode)))

    #+end_src
** Avy
   Jump around like a ninja. Super fast!!
   #+begin_src emacs-lisp
     (use-package avy
       :ensure t
       :bind
       (:map global-map
       ("C-;" . avy-goto-char)
       ("C-'" . avy-goto-char-2)
       ("M-g l" . avy-goto-line)
       ("M-g r" . avy-resume)
       :map org-mode-map
       ("C-'" . avy-goto-char-2))
       )
   #+end_src
** Latex Mode
*** Main latex stuff
   #+begin_src emacs-lisp
     (use-package latex
       :defer t
       :ensure auctex
       :mode ("//.tex//" . latex-mode)
       :hook
       (LaTeX-mode . outline-minor-mode)
       :config
       (progn
	 (setq TeX-fold-mode t)
	 (setq TeX-parse-self t)
	 (setq TeX-save-query nil)
	 (setq TeX-PDF-mode t)
	 (add-hook 'LaTeX-mode-hook 'cdlatex-mode)
	 ))
   #+end_src
*** Auctex things
    Basically adding to $PATH. Why this didn't work when doing it through my zshrc, we'll never know.
    #+begin_src emacs-lisp
      (setenv "PATH" (concat "/opt/texlive/2020/bin/x86_64-linux:"
			       (getenv "PATH")))
      (add-to-list 'exec-path "/opt/texlive/2020/bin/x86_64-linux")
    #+end_src
** Projectile
   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t
       :diminish ""
       :bind
       (("<escape> p" . projectile-command-map)
	("C-c p" . projectile-command-map))
       :config
       (projectile-mode 1)
       (setq projectile-completion-system 'ivy))
   #+end_src
** Fancy Battery mode
   #+begin_src emacs-lisp
     (use-package fancy-battery
       :ensure t
       :config
       (add-hook 'after-init-hook #'fancy-battery-mode)
       (setq fancy-battery-show-percentage t))
   #+end_src
** Vterm
   #+begin_src emacs-lisp
     (use-package vterm
       :ensure t)
   #+end_src
** Posframe and Ivy-posframe
*** Posframe
    #+begin_src emacs-lisp
      (use-package posframe
	:ensure t
	:diminish ""
	)
    #+end_src
*** Ivy-posframe
    #+begin_src emacs-lisp
      (use-package ivy-posframe
	:ensure t
	:after (ivy posframe)
	:diminish ""
	:config
	(setq ivy-posframe-parameters
	      '((left-fringe . 2)
		(right-fringe . 2)
		(internal-border-width . 2)
		;; (font . "DejaVu Sans Mono-10.75:hintstyle=hintfull")
		))
	(setq ivy-posframe-height-alist
	      '((swiper . 15)
		(swiper-isearch . 15)
		(t . 10)))
	(setq ivy-posframe-display-functions-alist
	      '((complete-symbol . ivy-posframe-display-at-point)
		(swiper . nil)
		(swiper-isearch . nil)
		(t . ivy-posframe-display-at-frame-center)))
	(ivy-posframe-mode 1))

    #+end_src

** Recentf
I use recentf to re-open the last X opened items.
   #+begin_src emacs-lisp
     (use-package recentf
       :config
       (recentf-mode 1)
       (setq recentf-max-menu-items 5)
       (setq recentf-max-saved-items 10)

       (defun skye/recentf-open-all ()
	   "My own function to open recentf's file"
	 (interactive)
	 (dolist (recentfiles recentf-list) (find-file recentfiles)))
  
       (add-hook 'after-init-hook 'skye/recentf-open-all)
       )
   #+end_src
* Lastly,
  This should only load if everything else doesn't fail. Should consider putting some of this in a different place.
  #+begin_src emacs-lisp
    (require 'org-tempo)
    (put 'scroll-left 'disabled nil)
    (put 'dired-find-alternate-file 'disabled nil)
    (put 'narrow-to-region 'disabled nil)
  #+end_src
